# DataSource settings:
#spring.datasource.url=jdbc:postgresql://localhost:5432/masef-courrier
#spring.datasource.username=postgres
# spring.datasource.url=jdbc:mysql://localhost:3306/masef-courrier?useSSL=false&characterEncoding=UTF-8&characterSetResults=UTF-8&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
#useUnicode=yes&characterEncoding=UTF-8&characterSetResults=UTF-8
# spring.datasource.username=root
#spring.datasource.password=admin
#spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
# Specify the DBMS
# spring.jpa.database = MYSQL
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# Show or not log for each sql query
spring.datasource.url=jdbc:mysql://localhost:3306/masef-courrier
spring.datasource.username=root
spring.datasource.password=
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=update
# spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
# spring.thymeleaf.cache=false
server.port=8081

server.address=0.0.0.0

server.tomcat.uri-encoding=UTF-8

# HTTP encoding (HttpEncodingProperties)
# spring.http.encoding.charset=UTF-8
# spring.http.encoding.enabled=true
# spring.http.encoding.force=true
# spring.main.allow-circular-references=true

# CORS Configuration

#1
# spring.security.oauth2.client.registration.keycloak.client-id=courrier
# spring.security.oauth2.client.registration.keycloak.client-secret=RpVcFyPe5atIM5KUJP3xKrnMK3PJ2N8U
# spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.keycloak.scope=openid,profile,roles
# spring.security.oauth2.client.registration.keycloak.redirect-uri=http://192.168.1.34:8081/login/oauth2/code/keycloak

# spring.security.oauth2.client.registration.keycloak.client-authentication-method=basic
# spring.security.oauth2.client.registration.keycloak.provider=keycloak
#2
# spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/masef
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:9090/realms/masef/protocol/openid-connect/certs
# spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:9090/realms/masef/protocol/openid-connect/token
# spring.security.oauth2.client.provider.your-client-id.authorization-uri=http://localhost:9090/realms/masef/protocol/openid-connect/auth
# spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9090/realms/masef
#3

spring.security.oauth2.client.registration.keycloak.client-id=courrier
spring.security.oauth2.client.registration.keycloak.client-secret=RpVcFyPe5atIM5KUJP3xKrnMK3PJ2N8U
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8081/login/oauth2/code/keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/masef
spring.security.oauth2.client.provider.your-client-id.authorization-uri=http://localhost:9090/realms/masef/protocol/openid-connect/auth
# spring.main.allow-bean-definition-overriding=true

# Keycloak Configuration
# spring.security.oauth2.client.registration.keycloak.client-id=courrier
# spring.security.oauth2.client.registration.keycloak.client-secret=RpVcFyPe5atIM5KUJP3xKrnMK3PJ2N8U
# spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.keycloak.scope=openid, profile, roles
# spring.security.oauth2.client.registration.keycloak.provider=keycloak
# spring.security.oauth2.client.provider.keycloak.issuer-uri=http://192.168.1.34:9090/realms/masef
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://192.168.1.34:9090/realms/masef/protocol/openid-connect/certs
# spring.security.oauth2.client.provider.keycloak.token-uri=http://192.168.1.34:9090/realms/SpringBootKeycloak/protocol/openid-connect/token
# spring.servlet.multipart.max-file-size=60MB
# spring.servlet.multipart.max-request-size=60MB
# spring.security.oauth2.client.registration.keycloak.client-id=courrier
# spring.security.oauth2.client.registration.keycloak.client-secret=jUw44gmfKIlFdUg1OE1fPcSXUNzvd03b
# spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
# spring.security.oauth2.client.registration.keycloak.scope=openid, profile, roles
# spring.security.oauth2.client.registration.keycloak.provider=keycloak
# spring.security.oauth2.client.provider.keycloak.issuer-uri=http://192.168.1.34:9090/realms/masef
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://192.168.1.34:9090/realms/masef/protocol/openid-connect/certs
# spring.security.oauth2.client.registration.keycloak.client-name=courrier
# Réflexion sur la Sécurité :
# Évitez d'exposer le client secret dans le fichier de propriétés dans un environnement de production.

# OIDC provider configuration:
# spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/SpringBootKeycloak
# spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
# spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9090/realms/SpringBootKeycloak
# spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8081/*
# spring.security.oauth2.client.registration.keycloak.client-name=courrier
# spring.security.oauth2.client.registration.keycloak.user-name-attribute=preferred_username
# spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8081/*
